{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "from urllib.request import urlopen\n",
    "from bs4 import BeautifulSoup\n",
    "import re\n",
    "from tqdm import tqdm\n",
    "import urllib\n",
    "import os\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "showdict = {}\n",
    "failures = []\n",
    "failuress = set()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 10000/10000 [14:58:45<00:00,  5.39s/it] \n"
     ]
    }
   ],
   "source": [
    "def getpage(animeid):\n",
    "    url = f\"https://myanimelist.net/anime/{animeid}\"\n",
    "    with urllib.request.urlopen(url) as html:\n",
    "        bs = BeautifulSoup(html, 'html.parser')\n",
    "        titles = bs.find_all('title')\n",
    "        if len(titles) != 1:\n",
    "            return (False, animeid)\n",
    "\n",
    "        title = str(titles[0]).split(\">\")[1].split(\"<\")[-2].replace(\"\\n\", \"\")\n",
    "        \n",
    "        links = bs.find_all('link')\n",
    "        found = []\n",
    "        for l in links:\n",
    "            if \"myanimelist\" in str(l) and str(animeid) in str(l):\n",
    "                found.append(l)\n",
    "        \n",
    "        if len(found) != 1:\n",
    "            return (False, animeid)\n",
    "                \n",
    "        bakeurl = str(found[0]).split('\"')[1]+ \"/characters\"\n",
    "        showcharacters = []\n",
    "        with urllib.request.urlopen(bakeurl) as charpage:\n",
    "            bs = BeautifulSoup(charpage, 'html.parser')\n",
    "            links = bs.find_all('a')\n",
    "            for l in links:\n",
    "                if \".php\" not in str(l) and \"view_more\" not in str(l) and \"https://myanimelist.net/character\" in str(l) and \"myanimelist\" in str(l) and \"cdn.myanimelist.net\" not in str(l):\n",
    "                    linkdecomp = str(l).split(\"/\")[-2].split('\"')[0]\n",
    "                    characterid = str(l).split(\"/\")[4]\n",
    "                    showcharacters.append((linkdecomp, characterid))\n",
    "\n",
    "        return True, (title, showcharacters)\n",
    "\n",
    "for animeid in tqdm(range(0, 10000)):\n",
    "    if animeid in showdict.keys() or animeid in failuress:\n",
    "        pass\n",
    "    else:\n",
    "        time.sleep(5.0)\n",
    "        try:\n",
    "            status, content = getpage(animeid)\n",
    "            if status:\n",
    "                showdict[animeid] = content\n",
    "            else:\n",
    "                failuress.add(animeid)\n",
    "                failures.append(animeid)\n",
    "        except Exception as e:\n",
    "            failuress.add(animeid)\n",
    "            failures.append((animeid, e))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "failures_str = []\n",
    "for f in failures:\n",
    "    if isinstance(f, int):\n",
    "        failures_str.append((f))\n",
    "    elif isinstance(f, tuple) and len(f) == 2 and isinstance(f[0], int):\n",
    "        failures_str.append((int(f[0]), str(f[1])))\n",
    "    else:\n",
    "        print(f)\n",
    "\n",
    "\n",
    "pickle.dump((showdict, failures_str), open(\"MALSCmaldump_0_10000.p\", \"wb\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
